(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/**
 * @jsx React.DOM
 */
/*jshint quotmark: false */
/*jshint white: false */
/*jshint trailing: false */
/*jshint newcap: false */
/*global React */

require([
    'backbone', 'react'
], function(Backbone, React) {
var app = app || {};

(function () {
	'use strict';

	var ESCAPE_KEY = 27;
	var ENTER_KEY = 13;

	app.TodoItem = React.createClass({displayName: "TodoItem",
		getInitialState: function () {
			return {editText: this.props.todo.get('title')};
		},

		handleSubmit: function () {
			var val = this.state.editText.trim();
			if (val) {
				this.props.onSave(val);
				this.setState({editText: val});
			} else {
				this.props.onDestroy();
			}
			return false;
		},

		handleEdit: function () {
			// react optimizes renders by batching them. This means you can't call
			// parent's `onEdit` (which in this case triggeres a re-render), and
			// immediately manipulate the DOM as if the rendering's over. Put it as a
			// callback. Refer to app.jsx' `edit` method
			this.props.onEdit(function () {
				var node = this.refs.editField.getDOMNode();
				node.focus();
				node.setSelectionRange(node.value.length, node.value.length);
			}.bind(this));
			this.setState({editText: this.props.todo.get('title')});
		},

		handleKeyDown: function (event) {
			if (event.which === ESCAPE_KEY) {
				this.setState({editText: this.props.todo.get('title')});
				this.props.onCancel();
			} else if (event.which === ENTER_KEY) {
				this.handleSubmit();
			}
		},

		handleChange: function (event) {
			this.setState({editText: event.target.value});
		},

		render: function () {
			return (
				React.createElement("li", {className: React.addons.classSet({
					completed: this.props.todo.get('completed'),
					editing: this.props.editing
				})}, 
					React.createElement("div", {className: "view"}, 
						React.createElement("input", {
							className: "toggle", 
							type: "checkbox", 
							checked: this.props.todo.get('completed'), 
							onChange: this.props.onToggle}
						), 
						React.createElement("label", {onDoubleClick: this.handleEdit}, 
							this.props.todo.get('title')
						), 
						React.createElement("button", {className: "destroy", onClick: this.props.onDestroy})
					), 
					React.createElement("input", {
						ref: "editField", 
						className: "edit", 
						value: this.state.editText, 
						onBlur: this.handleSubmit, 
						onChange: this.handleChange, 
						onKeyDown: this.handleKeyDown}
					)
				)
			);
		}
	});
})();
});

},{}]},{},[1]);
